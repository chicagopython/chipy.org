[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chipy_website"
version="2.4.0"
description = "The ChiPy Website"
objects.license = { text = "MIT License" }
requires-python = ">=3.11.10"
authors = [
    { name = "ChiPy Web Guild", email = "chicago-organizers@python.org" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
#    "Programming Language :: Python :: 3.12",# TODO: upgrade python
#    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "boto3",
    "crispy-bootstrap5",
    "dj-database-url",
    "django",
    "django-admin-tools",
    "django-bleach",
    "django-crispy-forms",
    "django-extensions",
    "django-flatblocks",
    "django-grappelli",
    "django-gravatar2",
    "django-honeypot",
    "django-ical",
    "django-simple-captcha",
    "django-storages",
    "django-tinymce",
    "djangorestframework",
    "gunicorn",
    "pillow",
    "probablepeople",
    "psycopg2-binary",
    "python-openid2",
    "requests",
    "six",
    "social-auth-app-django",
    "sorl-thumbnail",
    "whitenoise",
    "bleach",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest==6.2.5",
    "pytest-django==4.5.2",
    "uwsgi",
]

[tool.hatch.build.targets.wheel]
packages = [
    "chipy_org",
]
exclude = [
    "*.pxi",
    "*.pyx",
]

[tool.isort]
atomic = true
include_trailing_comma = true
line_length = 100
multi_line_output = 3
skip = 'manage.py'
skip_glob = '**/migrations/*'

[tool.ruff]
line-length = 100
indent-width = 4
target-version = "py311"
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests",  
    "migrations",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
